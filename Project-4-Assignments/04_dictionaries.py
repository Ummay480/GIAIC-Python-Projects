# -*- coding: utf-8 -*-
"""04_dictionaries.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19JMkwBW4XZtypzLPiKrDUtDrZppMjKMo

# **00_count_nums**

Problem Statement
This program counts the number of times each number appears in a list. It uses a dictionary to keep track of the information.

An example run of the program looks like this (user input is in blue):

Enter a number: 3 Enter a number: 4 Enter a number: 3 Enter a number: 6 Enter a number: 4 Enter a number: 3 Enter a number: 12 Enter a number: 3 appears 3 times. 4 appears 2 times. 6 appears 1 times. 12 appears 1 times.
"""

print("/00_count_nums")

def count_nums():
    nums = {}
    while True:
       num= input("Enter a number or (type 'exit' to quit): ")
       if num.lower() == "exit":
            break
       if num.isdigit():
         num = int(num)
         nums[num] = nums.get(num, 0) + 1
         print("Updated dictionary:", nums)  # âœ… Shows update after every number
       else:
         print("Invalid input. Please enter a number or type 'exit' to quit.")
    return nums

def display_counts(nums):
  print("\n Number Count:")
  for key, value in nums.items():
    print(f"{key} appears {value} times.")

if __name__ == "__main__":
    counts = count_nums()
    display_counts(counts)

"""# **01_phonebook**

Problem Statement
In this program we show an example of using dictionaries to keep track of information in a phonebook.
"""

print("01_phonebook")

def add_contact(phonebook):
    name = input("EnterContact name: " )
    phone = input("Enter phone number: ")
    if name in phonebook:
        print("Contact already exists.")
    else:
     phonebook[name] = phone
    print(f"Contact added successfully!")

def search_contact(phonebook):
  name = input("Enter contact name to search: ")
  if name in phonebook:
    print(f"{name}'s phone number is {phonebook[name]}")
  else:
    print("Contact not found in the phonebook.")

def display_contacts(phonebook):
  if phonebook:
   print("\n phonebook contact list")
   for name, phone in phonebook.items():
     print(f"{name}: {phone}")
  else:
    print("Phonebook is empty.")

def delete_contact(phonebook):
    name = input("Enter contact name to delete: ")
    if name in phonebook:
      del phonebook[name]
      print(f"Contact '{name}' deleted successfully.")
    else:
        print("Contact not found in the phonebook.")

if __name__ == "__main__":
    phonebook = {}
    while True:
        print("\nPhonebook Menu:")
        print("1. Add Contact")
        print("2. Search Contact")
        print("3. Display Contacts")
        print("4. Delete Contact")
        print("5. Exit")
        choice = input("Enter your choice: ")
        if choice == "1":
            add_contact(phonebook)
        elif choice == "2":
            search_contact(phonebook)
        elif choice == "3":
            display_contacts(phonebook)
        elif choice == "4":
            delete_contact(phonebook)
        elif choice == "5":
            print("Exiting phonebook Goodby")
            break
        else:
            print("Invalid choice. Please tEnter the number between 1 to 5.")

"""# **02_pop_up_shop**

Problem Statement
There's a small fruit shop nearby your house that you like to buy from. Since you buy several fruit at a time, you want to keep track of how much the fruit will cost before you go. Luckily you wrote down what fruits were available and how much one of each fruit costs.

Write a program that loops through a dictionary of fruits, prompting the user to see how many of each fruit they want to buy, and then prints out the total combined cost of all of the fruits.

Here is an example run of the program (user input is in bold italics):

How many (apple) do you want?: 2

How many (durian) do you want?: 0

How many (jackfruit) do you want?: 1

How many (kiwi) do you want?: 0

How many (rambutan) do you want?: 1

How many (mango) do you want?: 3

Your total is $99.5
"""

print("02_pop_up_shop")

fruit_prices = {
    "apple": 1.5,
    "durian": 10.0,
    "jackfruit": 5.0,
    "kiwi": 2.0,
    "rambutan": 3.0,
    "mango": 4.0
}

def calculate_total_cost():
 fruit_price = {
     "apple": 1.5,
     "durian": 10.0,
     "jackfruit": 5.0,
     "kiwi": 2.0,
     "rambutan": 3.0,
 }
 total_cost = 0
 for fruit, price in fruit_prices.items():
    while True:
      try:
        quantity = int(input(f"How many ({fruit}) do you want?: "))
        if quantity < 0:
          print("Invalid quantity. Please enter a non-negative number.")
          continue
        total_cost += quantity * price
        break
      except ValueError:
          print("Invalid input. Please enter a valid number.")
          continue
    print(f"\n Your Total coast is: ${total_cost: .2f} ")

if __name__ == "__main__":
    calculate_total_cost()

"""# **03_powerful_passwords**

Problem Statement
You want to be safe online and use different passwords for different websites. However, you are forgetful at times and want to make a program that can match which password belongs to which website without storing the actual password!

This can be done via something called hashing. Hashing is when we take something and convert it into a different, unique identifier. This is done using a hash function. Luckily, there are several resources that can help us with this.

For example, using a hash function called SHA256(...) something as simple as

hello

can be hashed into a much more complex

2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824

Fill out the login(...) function for a website that hashes their passwords. Login should return True if an email's stored password hash in stored_logins is the same as the hash of password_to_check.

(Hint. You will need to use the provided hash_password(...) function. You don't necessarily need to know how it works, just know that hash_password(...) returns the hash for the password!)
"""

print("03_powerful_passwords")

import hashlib

def hash_password(password):
  return hashlib.sha256(password.encode()).hexdigest()
stored_login = {
  "username@example.com": hash_password ("user123"),
  "admin@example.com": hash_password ("adminpass")
    }
def login(email, password):
  if email in stored_login:
    return stored_login[email] == hash_password(password)
  return False

if __name__ == "__main__":
  email = input("Enter your email: ")
  password = input("Enter your password: ")
  if login(email, password):
    print("Login successful!")
  else:
    print("Invalid email or password.")
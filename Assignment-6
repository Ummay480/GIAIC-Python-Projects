{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMh8WSOxbx2SwHfq5AzWNcQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ummay480/GIAIC-Python-Projects/blob/main/Assignment_6_%22OOP%22.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Using self\n",
        "Create a class Student with attributes name and marks. Use the self keyword to initialize these values via a constructor. Add a method display() that prints student details."
      ],
      "metadata": {
        "id": "t2H5-p-SI9fU"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rMkh5emZIei4",
        "outputId": "4934eecd-167d-4447-d854-bd13f381e395"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Student Name: Ameer\n",
            "Marks: 99\n",
            "Student Name: Hania\n",
            "Marks: 88\n"
          ]
        }
      ],
      "source": [
        "class Student:\n",
        "  def __init__(self, name, marks):\n",
        "      self.name = name\n",
        "      self.marks= marks\n",
        "  def display(self):\n",
        "      print(\"Student Name:\", self.name)\n",
        "      print(\"Marks:\", self.marks)\n",
        "\n",
        "# Example usage:\n",
        "Student1 = Student(\"Ameer\", 99)\n",
        "Student1.display()\n",
        "\n",
        "student2 = Student(\"Hania\", 88)\n",
        "student2.display()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Using cls\n",
        "Assignment:\n",
        "Create a class Counter that keeps track of how many objects have been created. Use a class variable and a class method with cls to manage and display the count."
      ],
      "metadata": {
        "id": "NgmIoqHU4-RB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Counter:\n",
        "  object_count = 0\n",
        "\n",
        "  def __init__(self):\n",
        "    # hr object bnany pr count barh jaey ga\n",
        "    Counter.object_count += 1\n",
        "\n",
        "  @classmethod\n",
        "  def display_count(cls):\n",
        "    print(\"Total objects created:\", cls.object_count)\n",
        "\n",
        " #Create Objects\n",
        "obj1 = Counter()\n",
        "obj2 = Counter()\n",
        "obj3 = Counter()\n",
        "\n",
        "# Class method call kiya\n",
        "Counter.display_count()\n"
      ],
      "metadata": {
        "id": "QQfUl8YCKh4w",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c147eff8-8b6a-4f6b-ad70-cd3dc605e11f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total objects created: 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Public Variables and Methods\n",
        "Assignment:\n",
        "Create a class Car with a public variable brand and a public method start(). Instantiate the class and access both from outside the class."
      ],
      "metadata": {
        "id": "S8pTd7VI_yPB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Car:\n",
        "    def __init__ (self,brand):\n",
        "        self.brand = brand\n",
        "    def start(self): #Public method\n",
        "        print(f\"{self.brand} car is starting...\")\n",
        "\n",
        "# Creating Object\n",
        "my_car = Car(\"Suzuki\")\n",
        "\n",
        "# Public variable access\n",
        "print(\"Car Brand:\", my_car.brand)\n",
        "\n",
        "#Public method call\n",
        "my_car.start()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fAoqa5bf9qDc",
        "outputId": "b1b19bf5-2c67-423c-e5ab-c31c2169e38d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Car Brand: Suzuki\n",
            "Suzuki car is starting...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Class Variables and Class Methods\n",
        "Assignment:\n",
        "Create a class Bank with a class variable bank_name. Add a class method change_bank_name(cls, name) that allows changing the bank name. Show that it affects all instances."
      ],
      "metadata": {
        "id": "YXczKGQPL6Mu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Bank:\n",
        "   bank_name = \"Bank of Pakistan\"\n",
        "\n",
        "   def __init__ (self, account_holder):\n",
        "        self.account_holder = account_holder\n",
        "\n",
        "   @classmethod\n",
        "   def change_bank_name(cls, name):\n",
        "       cls.bank_name = name\n",
        "\n",
        "   def display(self):\n",
        "       print(f\"Account Holder:{self.account_holder}, Bank:{Bank.bank_name}\")\n",
        "\n",
        "# Creating Objects\n",
        "user1 = Bank(\"Ameer\")\n",
        "user2 = Bank(\"Hania\")\n",
        "\n",
        "\n",
        "# Display initial bank name\n",
        "user1.display()\n",
        "user2.display()\n",
        "\n",
        "# Class method se bank ka name change krp\n",
        "Bank.change_bank_name(\"Bank of Punjab\")\n",
        "\n",
        "#Bank name check kro\n",
        "user1.display()\n",
        "user2.display()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BdfqbWPUL8u3",
        "outputId": "8054cd9d-61be-475a-8306-e9d06760bbfc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Account Holder:Ameer, Bank:Bank of Pakistan\n",
            "Account Holder:Hania, Bank:Bank of Pakistan\n",
            "Account Holder:Ameer, Bank:Bank of Punjab\n",
            "Account Holder:Hania, Bank:Bank of Punjab\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Static Variables and Static Methods\n",
        "Assignment:\n",
        "Create a class MathUtils with a static method add(a, b) that returns the sum. No class or instance variables should be used."
      ],
      "metadata": {
        "id": "FmlzBsop5eBx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class MathUtils:\n",
        "  @staticmethod\n",
        "  def add(a,b):\n",
        "    return a + b\n",
        "\n",
        "#Static Mathod call (no Object needed)\n",
        "result = MathUtils.add(5, 3)\n",
        "print(\"The Sum is:\", result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "47ai9k465wky",
        "outputId": "c66de18c-a8d4-47b9-984b-1b08229a3c4a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The Sum is: 8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. Assignment\n",
        "Create a class Logger that prints a message when an object is created (constructor) and another message when it is destroyed (destructor)."
      ],
      "metadata": {
        "id": "eVQcY2dSIRQF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Logger:\n",
        "  def __init__(self):\n",
        "    print(\"Logger object created.\")\n",
        "\n",
        " # Create an object of Logger class\n",
        " logger1 = Logger()\n",
        "\n",
        " #Delete the object explicity to in voke the destructure\n",
        " del Logger1\n",
        "\n",
        " print(\"Logger object destroyed.\")"
      ],
      "metadata": {
        "id": "Jf8SrdfIIXdg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. Access Modifiers: Public, Private, and Protected\n",
        "Assignment:\n",
        "Create a class Employee with:\n",
        "\n",
        "a public variable name,\n",
        "\n",
        "a protected variable _salary, and\n",
        "\n",
        "a private variable __ssn.\n",
        "\n",
        "Try accessing all three variables from an object of the class and document what happens.\n",
        "\n"
      ],
      "metadata": {
        "id": "VXuNVYGclAG5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        " class Employee:\n",
        "      #  Public variable\n",
        "      name = \"Ali\"\n",
        "\n",
        "      # Protected variable\n",
        "      _salary = 50000\n",
        "\n",
        "      # Private variable\n",
        "      __ssn = \"123456789\"\n",
        "\n",
        "\n",
        "#Creating an object of employee class\n",
        " emp = Employee()\n",
        "\n",
        "#  Accessing the public variable\n",
        " print(\"Name:\", emp.name)\n",
        "\n",
        "# Accessing the Protacted variable\n",
        " print(\"Salary:\", emp._salary)\n",
        "\n",
        " #Accessing the private varibale (This will raise an error)\n",
        "\n",
        " try:\n",
        "    print(\"SSN:\", emp.__ssn)\n",
        " except AttributeError as e:\n",
        "    print(\"Error:\",e)\n",
        "\n",
        "#Acessing the private variable via name mangling\n",
        " print(\"SSN(via name mangling):\", emp._Employee__ssn)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BplC00bQIeO-",
        "outputId": "5dc877af-c899-4486-9819-238ce3254a99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Name: Ali\n",
            "Salary: 50000\n",
            "Error: 'Employee' object has no attribute '__ssn'\n",
            "SSN(via name mangling): 123456789\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. The super() Function\n",
        "Assignment:\n",
        "Create a class Person with a constructor that sets the name. Inherit a class Teacher from it, add a subject field, and use super() to call the base class constructor."
      ],
      "metadata": {
        "id": "KN8HhJk-jiYn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Base class Person\n",
        "class Person:\n",
        "    def __init__(self, name):\n",
        "        self.name = name\n",
        "\n",
        "# Derived class Teacher\n",
        "class Teacher(Person):\n",
        "    def __init__(self, name, subject):\n",
        "        # Calling the base class constructor using super()\n",
        "        super().__init__(name)\n",
        "        self.subject = subject\n",
        "\n",
        "    def display(self):\n",
        "        print(f\"Name: {self.name}\")\n",
        "        print(f\"Subject: {self.subject}\")\n",
        "\n",
        "# Teacher class ka object bana raha hai\n",
        "teacher = Teacher(\"Mr. Ali Jawad\", \"Mathematics\")\n",
        "\n",
        "# Teacher ka detailed display\n",
        "teacher.display()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AxIPRvQyjnUM",
        "outputId": "019f31f9-b689-4cdc-cfd0-bbff3cb391f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Name: Mr. Ali Jawad\n",
            "Subject: Mathematics\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. Abstract Classes and Methods\n",
        "Assignment:\n",
        "Use the abc module to create an abstract class Shape with an abstract method area(). Inherit a class Rectangle that implements area().\n",
        "\n"
      ],
      "metadata": {
        "id": "Kw4L7Yt0r_Mn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from abc import ABC, abstractmethod\n",
        "\n",
        "# Abstract class shape\n",
        "class Shape(ABC):\n",
        "  @abstractmethod\n",
        "  def area(self):\n",
        "    pass\n",
        "\n",
        "# Class Rectangle that inherits from Shape and implements that area method\n",
        "class Rectangle(Shape):\n",
        "    def __init__(self, width, height):\n",
        "       self.width = width\n",
        "       self.height = height\n",
        "\n",
        "    def area(self):\n",
        "        return self.width * self.height\n",
        "\n",
        "# Creating an object of Rectangle and calling the area method\n",
        "rect = Rectangle(5, 10)\n",
        "print(\"Area of Rectangle:\", rect.area())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9pNPY3yiu4It",
        "outputId": "9e4e6fd4-8b81-4c89-9ba1-87ba27e666b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Area of Rectangle: 50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. Instance Methods\n",
        "Assignment:\n",
        "Create a class Dog with instance variables name and breed. Add an instance method bark() that prints a message including the dog's name."
      ],
      "metadata": {
        "id": "tM0qYeFB25GY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Dog:\n",
        "  def __init__(self, name, breed):\n",
        "      # Instant Variables\n",
        "       self.name = name\n",
        "       self.breed = breed\n",
        "\n",
        "\n",
        "  def bark(self):\n",
        "      #Instancae method that prints a message with dthe dog's name\n",
        "      print(f\"{self.name} says woof!\")\n",
        "\n",
        "# Creating an obect of the Dog class\n",
        "my_dog = Dog (\"Buddy\", \"Golden Retriver\")\n",
        "# calling the method\n",
        "my_dog.bark()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IsYE2jMX27Vg",
        "outputId": "1363bafc-2f31-48d1-c0f6-14087267843f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Buddy says woof!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "11. Class Methods\n",
        "Assignment:\n",
        "Create a class Book with a class variable total_books. Add a class method increment_book_count() to increase the count when a new book is added."
      ],
      "metadata": {
        "id": "6Uc6xw0S7N_n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Book:\n",
        "#  Class Variable to track the total number of books\n",
        "   total_books = 0\n",
        "\n",
        "   @classmethod\n",
        "   def increment_book_count(cls):\n",
        "   #Increment the total books count when add a neew book\n",
        "    cls.total_books +=1\n",
        "\n",
        "   def __init__(self, title, author):\n",
        "    # instance Variables\n",
        "    self.title = title\n",
        "    self.author = author\n",
        "    #  Call the class method to incerment the book count when a new book is created\n",
        "    Book.increment_book_count()\n",
        "\n",
        "    #  Creating new book object\n",
        "book1 = Book(\"The Great Getsby\", \"F.Scott Fitzgerald\")\n",
        "book2 = Book(\"1984\", \"George Orwell\")\n",
        "\n",
        "#  Accessing the class variables\n",
        "print(f\"Total Books :{Book.total_books}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Md9Fj0DV7TPR",
        "outputId": "795a24bc-00ed-461d-e771-d87aefb28364"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total Books :2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "12. Static Methods\n",
        "Assignment:\n",
        "Create a class TemperatureConverter with a static method celsius_to_fahrenheit(c) that returns the Fahrenheit value."
      ],
      "metadata": {
        "id": "upvntqDOFSGm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class TemperatureConverter:\n",
        "  @staticmethod\n",
        "  def celsius_to_fahrenheit(c):\n",
        "    #Formula to convert celsius_to_fahrenheit(c)\n",
        "    return(c * 9/5) +32\n",
        "\n",
        "  #calling the static method without creating an instance of the class\n",
        "celsius = 25\n",
        "fahrenheit = TemperatureConverter.celsius_to_fahrenheit(celsius)\n",
        "print(f\"{celsius}°C is equal to {fahrenheit}°F\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ol86UmM2FXeG",
        "outputId": "dc559d9e-0290-4ff5-fd61-24f8a49b4466"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "25°C is equal to 77.0°F\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "13. Composition\n",
        "Assignment:\n",
        "Create a class Engine and a class Car. Use composition by passing an Engine object to the Car class during initialization. Access a method of the Engine class via the Car class."
      ],
      "metadata": {
        "id": "mS5atZWtMRHG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Engine:\n",
        "    def __init__(self, engine_type):\n",
        "        self.engine_type = engine_type\n",
        "\n",
        "    def start(self):\n",
        "        print(f\"The {self.engine_type} engine is starting...\")\n",
        "\n",
        "class Car:\n",
        "    def __init__(self, brand, engine):\n",
        "        self.brand = brand\n",
        "        self.engine = engine\n",
        "\n",
        "    def start_car(self):\n",
        "        # Accessing the start method of the Engine class\n",
        "        return f\"{self.brand} car is starting. {self.engine.start()}\"\n",
        "\n",
        "# Creating an Engine object\n",
        "engine = Engine(\"V8\")\n",
        "\n",
        "# Creating a Car object and passing the engine object to it\n",
        "my_car = Car(\"Ford\", engine)\n",
        "\n",
        "# Calling the start_car method which uses the engine's start method\n",
        "print(my_car.start_car())\n"
      ],
      "metadata": {
        "id": "ag7p4tZZMVBO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c21168f5-b34b-43af-873e-2509795d1594"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The V8 engine is starting...\n",
            "Ford car is starting. None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "14. Aggregation\n",
        "Assignment:\n",
        "Create a class Department and a class Employee. Use aggregation by having a Department object store a reference to an Employee object that exists independently of it."
      ],
      "metadata": {
        "id": "2q5y9B3e5IlA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Employee:\n",
        "    def __init__(self, name, position):\n",
        "        self.name = name\n",
        "        self.position = position\n",
        "\n",
        "    def display_employee(self):\n",
        "        return f\"Employee Name: {self.name}, Position: {self.position}\"\n",
        "\n",
        "class Department:\n",
        "    def __init__(self, department_name, employees):\n",
        "        self.department_name = department_name\n",
        "        self.employees = employees\n",
        "\n",
        "    def get_department_info(self):\n",
        "        employee_info = \"\\n\".join([emp.display_employee() for emp in self.employees])\n",
        "        return f\"Department Name: {self.department_name}\\nEmployees:\\n{employee_info}\"\n",
        "\n",
        "# Creating Employee objects\n",
        "employee1 = Employee(\"John Doe\", \"Software Engineer\")\n",
        "employee2 = Employee(\"Jane Smith\", \"IT Specialist\")\n",
        "\n",
        "# Creating a Department object and aggregating the Employee objects\n",
        "hr_department = Department(\"Human Resources\", [employee1, employee2])\n",
        "\n",
        "# Displaying department info\n",
        "print(hr_department.get_department_info())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3SqrGcia5L3W",
        "outputId": "833134a6-9437-42d3-a17c-ce275fc3c07a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Department Name: Human Resources\n",
            "Employees:\n",
            "Employee Name: John Doe, Position: Software Engineer\n",
            "Employee Name: Jane Smith, Position: IT Specialist\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "15. Method Resolution Order (MRO) and Diamond Inheritance\n",
        "Assignment:\n",
        "Create four classes:\n",
        "\n",
        "A with a method show(),\n",
        "\n",
        "B and C that inherit from A and override show(),\n",
        "\n",
        "D that inherits from both B and C.\n",
        "\n",
        "Create an object of D and call show() to observe MRO."
      ],
      "metadata": {
        "id": "jKJzbvmg_lxO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class A:\n",
        "  def show(self):\n",
        "    print(\"Method for class A\")\n",
        "\n",
        "class B(A):\n",
        "  def show(self):\n",
        "    print(\"Method from class B\")\n",
        "\n",
        "class C(A):\n",
        "  def show(self):\n",
        "    print(\"Method from class C\")\n",
        "\n",
        "class D(B,C):\n",
        "  pass\n",
        "\n",
        "#Creating an object of class D\n",
        "d=D()\n",
        "\n",
        "#Calling the show() Method to observe the Method\n",
        "d.show()\n",
        "\n",
        "#print the MRO to observe the order\n",
        "print(D.mro())\n"
      ],
      "metadata": {
        "id": "RZsPPVsY_oKw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4cda15e9-9e96-4717-8af8-b95e46334655"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Method from class B\n",
            "[<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "16. Function Decorators\n",
        "Assignment:\n",
        "Write a decorator function log_function_call that prints \"Function is being called\" before a function executes. Apply it to a function say_hello()."
      ],
      "metadata": {
        "id": "3mrWThaJ_rn8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Decorator function\n",
        "def log_function_Call(func):\n",
        "  def wrapper():\n",
        "    print(\"Function is being called\")\n",
        "    return func() # Call the origional function\n",
        "  return wrapper\n",
        "\n",
        "# Function to be decorated\n",
        "@log_function_Call\n",
        "def say_hello():\n",
        "  print(\"Hello, World!\")\n",
        "\n",
        "#calling the decorated function\n",
        "say_hello()\n",
        "\n"
      ],
      "metadata": {
        "id": "mo_QKwQA_zT5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "52f9af48-cb3a-44bb-f1c1-f74dcd7c1a24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Function is being called\n",
            "Hello, World!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "17. Class Decorators\n",
        "Assignment:\n",
        "Create a class decorator add_greeting that modifies a class to add a greet() method returning \"Hello from Decorator!\". Apply it to a class Person."
      ],
      "metadata": {
        "id": "DUPGywLZ_0AO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Class decorator\n",
        "def add_greeting(cls):\n",
        "  def greet(self):\n",
        "    return \"Hello from Decorator!\"\n",
        "\n",
        "  # Add the greet method to the class\n",
        "  cls.greet = greet\n",
        "  return cls\n",
        "\n",
        "  #Applying the class decorator to the person class\n",
        "@add_greeting\n",
        "class person:\n",
        "  def __init__(self, name):\n",
        "    self.name = name\n",
        "\n",
        "  def introduce(self):\n",
        "      return f\"Hi!, I'm (self.name)\"\n",
        "\n",
        "# Creating an instance of the person class\n",
        "person = person(\"Alice\")\n",
        "# Calling the greet method added by the decorator\n",
        "print(person.greet()) #Output: Hello from decorator\n",
        "\n"
      ],
      "metadata": {
        "id": "o38IOEct_-ca",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "191ccf98-121e-4d5d-aa3f-69993c3ce0d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello from Decorator!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "18. Property Decorators: @property, @setter, and @deleter\n",
        "Assignment:\n",
        "Create a class Product with a private attribute _price. Use @property to get the price, @price.setter to update it, and @price.deleter to delete it."
      ],
      "metadata": {
        "id": "i-BH9jzz__IO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Product:\n",
        "   def __init__(self, name, price):\n",
        "      self.name = name\n",
        "      self._price = price #Private atribute\n",
        "\n",
        "  # Get for the price attribute\n",
        "   @property\n",
        "   def price(self):\n",
        "     return self._price\n",
        "\n",
        "# Setter to update the price attribute\n",
        "   @price.setter\n",
        "   def price(self , value):\n",
        "        if value < 0:\n",
        "           print(\"Price can not be nigative\")\n",
        "\n",
        "        else:\n",
        "           self._price = value\n",
        "\n",
        "# Deleter to delete the price attribute\n",
        "   @price.deleter\n",
        "   def price(self):\n",
        "      print(f\"Deleting the price of {self.name}\")\n",
        "      del self._price\n",
        "\n",
        "# Creating a product object\n",
        "product = Product(\"Laptop\", 1000)\n",
        "\n",
        "# Accessig the price using the @property\n",
        "print(product.price)# Out put :1000\n",
        "\n",
        "# Updating the price using the @price.setter\n",
        "product.price = 1200 # out put : 1200\n",
        "print(\"product.price\")\n",
        "\n",
        "# Trying to set a negative price\n",
        "product.price = -500\n",
        "\n",
        "# deleting the price using @Price.deleter\n",
        "del product.price # Out put: deleting the price of laptop\n",
        "\n"
      ],
      "metadata": {
        "id": "HA-F-W8AAD98",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cb691666-4329-4706-adc8-131d95418d60"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1000\n",
            "product.price\n",
            "Price can not be nigative\n",
            "Deleting the price of Laptop\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "19. callable() and __call__()\n",
        "Assignment:\n",
        "Create a class Multiplier with an __init__() to set a factor. Define a __call__() method that multiplies an input by the factor. Test it with callable() and by calling the object like a function."
      ],
      "metadata": {
        "id": "Nj3QHUrUAEeE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Multiplier:\n",
        "  def __init__(self, factor):\n",
        "    self.factor = factor # Setting the factor\n",
        "\n",
        "  def __call__(self, number):\n",
        "    # This method allows the object to be called like a function\n",
        "    return number * self.factor\n",
        "\n",
        "# Creating an instance of Multipler with a factor of 5\n",
        "multiplier = Multiplier(5)\n",
        "\n",
        "# Testing with callable() to check if the object is callable\n",
        "print(callable(multiplier))   #out put: True\n",
        "\n",
        "# Calling the object like a function to multiply an input by the factor of 10\n",
        "result = multiplier(10)   #THis calls __call__(10) method\n",
        "print(result)  #output: 50\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "7Hzrz7_7AV9m",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2edc4dab-86ae-4049-a245-f739662781f3"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "20. Creating a Custom Exception\n",
        "Assignment:\n",
        "Create a custom exception InvalidAgeError. Write a function check_age(age) that raises this exception if age < 18. Handle it with try...except."
      ],
      "metadata": {
        "id": "7TiZaJLBAWt2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Custom exception\n",
        "class InvalidAgeError(Exception):\n",
        "  def __Init__(self, message =\" Age must be 18 or above\"):\n",
        "      self.message = message\n",
        "      super()._init__(self.message)\n",
        "\n",
        "# Functionto check age\n",
        "def check_age(age):\n",
        "  if age < 18:\n",
        "    raise InvalidAgeError(f\"Invalid age: {age}. You must be 18 or above\")\n",
        "  else:\n",
        "    print(f\"Age {age} is Valid!\")\n",
        "\n",
        "    #Handling the exception using try ...... except\n",
        "try:\n",
        "      age = int(input(\"Enter your age: \"))\n",
        "      check_age(age)\n",
        "except InvalidAgeError as e:\n",
        "     print(f\"Error: {e}\")\n",
        "except ValueError:\n",
        "    print(\"Please Enter a valid Integer for age.\")\n",
        "\n"
      ],
      "metadata": {
        "id": "tQPXMoA2AjUZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ad0888f8-c4d4-4128-98e5-2c2f2fa6f273"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your age: 21\n",
            "Age 21 is Valid!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "21. Make a Custom Class Iterable\n",
        "Assignment:\n",
        "Create a class Countdown that takes a start number. Implement __iter__() and __next__() to make the object iterable in a for-loop, counting down to 0.\n"
      ],
      "metadata": {
        "id": "3Cson_qLAkOK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Countdown:\n",
        "  def __init__(self, start):\n",
        "    self.start = start # Set the strting number\n",
        "    self.current = start # Initialize current to the starting number\n",
        "\n",
        "  def __iter__(self):\n",
        "    # Return the iterator object itself\n",
        "      return self\n",
        "\n",
        "  def __next__(self):\n",
        "      # if current is less than 0, stop the iteration\n",
        "      if self.current < 0:\n",
        "        raise StopIteration\n",
        "      # Decrease current by 1 and return the value\n",
        "      self.current -= 1\n",
        "      return self.current + 1 # Return the number before decrement:\n",
        "\n",
        "# Creating an object of countdown\n",
        "countdown = Countdown(5)\n",
        "\n",
        "# Using the countdown object in a for loop\n",
        "for number in countdown:\n",
        "  print(number)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9iS_cbsYtcSk",
        "outputId": "fdb4de6a-6877-4296-9f11-86ac056f6b0e"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "4\n",
            "3\n",
            "2\n",
            "1\n",
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "Once you are done submit this form ASAP:\n",
        "\n",
        "https://forms.gle/tS7C3sr55tUZ36GY8"
      ],
      "metadata": {
        "id": "TyoeaA9FtfnK"
      }
    }
  ]
}
